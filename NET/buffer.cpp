buffer 模块： 缓冲区模块
提供的功能：存储数据，取出数据
实现思想：
1.实现换出去得有一块内存空间，采用vector<char> ,vector底层是一个线性的内存空间！
2.要素
    1.默认空间大小
    2.当前的读取数据位置！
    3.当前的写入数据位置！
3.操作
      1.写入位置
        当前写入位置指向哪里，从哪里开始写入
        如果后续剩余空间不够了！
      1.考虑整体缓冲区空闲空间是否足够！（因为读位置也会向后偏移，前后有可能有空闲空间）
        足够：将数据移动到起始位置
        不够：扩容，从当前写位置开始扩容足够大小！
        数据一旦写入成功，当前写位置，向后偏移！
      2.读取数据
        当前的读取位置指向哪里，就从哪里开始读取，前提是有数据可读
        可读数据大小：当前写入位置，减去当前读取位置！
class buffer {
    private:
        std::vector<char> _buffer;
        // 位置是一个相对偏移量，而不是绝对地址！
        uint64_t _read_idx; // 读位置
        uint64_t _write_idx; // 写位置
    public:
        1. 获取当前写的位置
        2. 确保可写空间足够
        3. 获取前沿空间大小
        4. 获取后沿空间大小
        5. 将写入据位置向后移动指定长度
        6. 获取当前读取位置的地址！
        7. 获取可读空间大小
        8. 将读位置向后移动指定长度！
        9. clear
};